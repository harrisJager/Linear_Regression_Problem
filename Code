# We have an linear equation and we need to find weight and bias of it, y=mx+b
# We are projecting prediction graph in red dots, if it is correct, it should be in line with the training and testing dataset

import torch
from torch import nn # nn contains all of PyTorch's building blocks for neural networks
import matplotlib.pyplot as plt

# Data preparation and loading, also exploration

# Create *known* parameters
weight = 0.7
bias = 0.3

# Create data
start = 0
end = 1
step = 0.02
X = torch.arange(start, end, step).unsqueeze(dim=1)
y = weight * X + bias

print(X)
print(y)

# Create train/test split
train_split = int(0.8 * len(X)) # 80% of data used for training set, 20% for testing
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

# we are giving the function values here by hard coding

def plot_predictions(train_data=X_train,
                     train_labels=y_train,
                     test_data=X_test,
                     test_labels=y_test,
                     predictions=None):
  """
  Plots training data, test data and compares predictions.
  """
  plt.figure(figsize=(10, 7))

  # Plot training data in blue
  plt.scatter(train_data, train_labels, c="b", s=4, label="Training data")

  # Plot test data in green
  plt.scatter(test_data, test_labels, c="g", s=4, label="Testing data")

  if predictions is not None:
    # Plot the predictions in red (predictions were made on the test data)
    plt.scatter(test_data, predictions, c="r", s=4, label="Predictions")

  # Show the legend
  plt.legend(prop={"size": 14});


# This is our linear regression model
# The super() function is used to call the constructor of the parent class (in this case, nn.Module).
# torch.randn(1,) parameter one creates a tensor of shape 1

# Creating a model

class LinearRegressionModel(nn.Module):
  def __init__(self):
    super().__init__()
    self.weight=nn.Parameter(torch.randn(1,dtype=torch.float,requires_grad=True))
    self.bias=nn.Parameter(torch.randn(1,dtype=torch.float,requires_grad=True))

# our function will take data(x), that  has a type torch.Tensor and it will return us a tensor of type
# tensor

  def forward(self,x: torch.Tensor)->torch.Tensor:
    return self.weight * x + self.bias

# Set manual seed since nn.Parameter are randomly initialzied
torch.manual_seed(42)

# initializing object of our model
model_0=LinearRegressionModel()

print("Model parameters before learing",model_0.state_dict())

# Training model with loss function and optimizer
# Creating a loss function and an optimizer

# For loss function are are using MAE loss fucntion or L1loss. It takes the mean difference between actual data and predicted data

loss_fn=nn.L1Loss()


# Creating an optimizer, we will use SGD Stocastic Gradient Decent algorithm to check how much correction steps we need to take, in order to
# correct our model

# We want to optimize parameters of our model_0 and we are putting our learning date at 0.01

optimizer= torch.optim.SGD(params=model_0.parameters(),lr=0.001)




# This returns a generator, in order to see the actual parameters, iterate over the generator or convert it into an object
# print(model_0.parameters())

# parameters = list(model_0.parameters())
# for param in parameters:
#     print(param)

# Creating training loop

torch.manual_seed(42)

# Set the number of epochs (how many times the model will pass over the training data)
epochs = 1700

# Create empty loss lists to track values

train_loss_values = []
test_loss_values = []
epoch_count = []

for epoch in range(epochs):
    ### Training

     # Put model in training mode (this is the default state of a model)
    model_0.train()
 # 1. Forward pass on train data using the forward() method inside
    y_pred = model_0(X_train)

 # 2. Calculate the loss (how different are our models predictions to the ground truth)
    loss = loss_fn(y_pred, y_train)

 # 3. Zero grad of the optimizer
    optimizer.zero_grad()

 # 4. Loss backwards
    loss.backward()

 # 5. Progress the optimizer
    optimizer.step()


    # Put the model in evaluation mode
    model_0.eval()

    with torch.inference_mode():
      # 1. Forward pass on test data
      test_pred = model_0(X_test)

      # 2. Caculate loss on test data
      test_loss = loss_fn(test_pred, y_test.type(torch.float)) # predictions come in torch.float datatype, so comparisons need to be done with tensors of the same type

      # Print out what's happening
      if epoch % 20 == 0:
            epoch_count.append(epoch)
            train_loss_values.append(loss.detach().numpy())
            test_loss_values.append(test_loss.detach().numpy())
            print(f"Epoch: {epoch} | MAE Train Loss: {loss} | MAE Test Loss: {test_loss} ")

# Find our model's learned parameters
print("The model learned the following values for weights and bias:")
print(model_0.state_dict())


# Making predications with our trained model

# 1. Set the model in evaluation mode
model_0.eval()

with torch.inference_mode():

 y_preds = model_0(X_test)

plot_predictions(predictions=y_preds)


from pathlib import Path

# 1. Create models directory
MODEL_PATH = Path(r"/content/Model")

# exist_ok is set to true, if directory already exists, if will throw error otherwise
# parents=true, this line creates the parent directory if it does not exists already
MODEL_PATH.mkdir(parents=True, exist_ok=True)

# 2. Create model save path
MODEL_NAME = "01_pytorch_workflow_model_0.pth"
MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME

# 3. Save the model state dict
print(f"Saving model to: {MODEL_SAVE_PATH}")
torch.save(obj=model_0.state_dict(), # only saving the state_dict() only saves the models learned parameters
           f=MODEL_SAVE_PATH)

# we are using torch.load inside state_dict because we have saved values of our learned parameters rather
# then whole model as it is more efficent

# Instantiate a new instance of our model (this will be instantiated with random weights)
loaded_model_0 = LinearRegressionModel()

# Load the state_dict of our saved model (this will update the new instance of our model with trained weights)
loaded_model_0.load_state_dict(torch.load(f=MODEL_SAVE_PATH))


# Evaluate loaded model
loaded_model_0.eval()

#with is used to propertly manage the resource, to use it and release it

with torch.inference_mode():
    loaded_model_1_preds = loaded_model_0(X_test)
y_preds == loaded_model_1_preds
